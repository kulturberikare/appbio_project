#! /usr/bin/env python3.6
import argparse
import sys
from Bio import SeqIO
from Bio.Alphabet import SingleLetterAlphabet
from Bio.Seq import Seq

# Functions
def transpose(lst):
    '''Returns the transpose of a list'''
    transposed_elements = list(map(list, zip(*lst)))
    transposedlst = []
    for e in transposed_elements:
        transposedlst.append(''.join(e))
    return transposedlst

# Execution
parser = argparse.ArgumentParser(description='Filters sequences in a given input file')
parser.add_argument('input_filename', metavar='fileref', type=str, help='input file reference')
parser.add_argument('-o', dest='output', action='store', metavar='filename', type=str, default=sys.stdout,
		    help='output filename. If not specified, output is written to stdout.')
args = parser.parse_args()

f = open(args.input_filename, "r")
records = list(SeqIO.parse(f, "fasta"))
sequences = []
for record in records:
    sequences.append(record.seq)
columns = transpose(sequences)

output = []
for column in columns:
    approved = True
    if column.count('-') / len(column) > 0.5:
        approved = False
    else:
        approved = False
        bases = list(set(column.replace('-', '')))
        cnt = 0
        for i in range(0, len(bases)):
            basecount = column.count(bases[i])
            if basecount > 2:
                approved = True
            if basecount == 1:
                cnt += 1
        if cnt / len(column.replace('-', '')) <= 0.5:
            approved = True
    if approved:
        output.append(column)

filtered_sequences = transpose(output)
for i in range(0, len(records)):
    records[i].seq = Seq(filtered_sequences[i], SingleLetterAlphabet())
SeqIO.write(records, args.output, 'fasta')
f.close()
